generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:Hamza@127.0.0.1:3306/inbox_pilot"
}

model User {
    id   String @id @default(cuid())
    name String?
    email String @unique
    emailVerified   DateTime?  
    plan      String @default("free")
    emailsGenerated Int @default(0)
    emailLimit Int @default(5)

    emails   Email[]   // back-relation
    campaigns Campaign[] // back relation
    sessions Session[]  // back-relation
    accounts Account[]  // back-relation
}


model Email {
    id  String @id @default(cuid())
    userId String
    campaignId String
    recipentEmail String
    recipentName String?
    CompanyName String
    Tone String
    output String @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    replies Reply[]

    user User @relation(fields: [userId], references: [id])
    campaign   Campaign @relation(fields: [campaignId], references: [id])
}

model Campaign {
  id      String @id @default(cuid())
  userId  String
  title   String
  goal    String
  status  CampaignStatus @default(ACTIVE)
  emailsSent Int @default(0)
  startDate DateTime
  endDate DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  emails Email[]
}

model Reply {
  id        String   @id @default(cuid())
  emailId   String
  createdAt DateTime @default(now())
  content   String?

  email     Email @relation(fields: [emailId], references: [id])
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  COMPLETED
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
